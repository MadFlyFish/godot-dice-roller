name: Build and release binaries

on:
  workflow_dispatch:
  push:
    tags:
      - '.+-[0-9]+.[0-9]+.[0-9]+'

env:
  GODOT_VERSION: 4.4.1
  EXPORT_NAME: godot-dice-roller
  PROJECT_PATH: .

permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04
    container:
      image: barichello/godot-ci:latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
          submodules: true

      - name: Setup symlink for GUT
        run: |
          mkdir -p addons
          ln -sf ../externals/gut/addons/gut addons/gut
  
      - name: Setup godot environment
        run: |
          # Barichello image and act cli setup config and templates
          # at /root as home, but Github action runner uses /home/github.
          echo Home set to $HOME
          if [ "$HOME" != "/root" ]; then
              echo Copying image config and templates to actual home from /root
              mkdir -p $HOME/.local/share/godot
              cp -rv /root/.local/share/godot/export_templates $HOME/.local/share/godot
              mkdir -p ~/.config
              cp -rv /root/.config/godot ~/.config
          else
              echo No need to copy image home, already at $HOME
          fi

      - name: Setup folders
        run: |
          mkdir -p .godot/editor .godot/imported
          mkdir -v -p build/windows
          mkdir -v -p build/web
          mkdir -v -p build/linux
          mkdir -v -p build/mac
          echo "$GITHUB_REF" > build/version.txt

      - name: GitHub Tag Name
        run: |
         echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
         echo "Tag name from github.ref_name: ${{  github.ref_name }}"

      - name: Web Build
        run: |
          godot -v --headless --export-release "Web" ./build/web/index.html

      # https://github.com/godotengine/godot-proposals/issues/6616#issuecomment-1513340085
      - name: Add coi-service-worker
        run: |
          git clone https://github.com/gzuidhof/coi-serviceworker.git
          mv coi-serviceworker/coi-serviceworker.js build/web/coi-serviceworker.js
          sed -i '3 i <script src="coi-serviceworker.js"></script>' build/web/index.html

      - name: Disable jeckyll
        run: touch build/web/.nojekyll

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web

      #- name: Deploy
      #  uses: peaceiris/actions-gh-pages@v3.9.3
      #  with:
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    publish_dir: ./build/web
      #    force_orphan: true
      #    user_name: "github-ci[bot]"
      #    user_email: "github-actions[bot]@users.noreply.github.com"
      #    commit_message: "Publish to gh-pages"

      # New way, not working yet. Complains on the content of the artifact
      #- name: Setup Pages
      #  uses: actions/configure-pages@v5

      #- name: Upload Artifact
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: web
      #    path: build/web

      #- name: Deploy to GitHub Pages
      #  id: deployment
      #  uses: actions/deploy-pages@v4
      #  with:
      #    static_site_generator: static
      #    artifact_name: web


      - name: Linux Build
        run: |
          godot -v --headless --export-release "Linux" ./build/linux/$EXPORT_NAME.x86_64

      - name: Windows Build
        run: |
          godot -v --headless --export-release "Windows Desktop" ./build/windows/$EXPORT_NAME.exe


      #- name: Mac Build
      #  run: |
      #    godot -v --headless --export-release "Mac OSX" ./build/mac/$EXPORT_NAME.zip
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: my-builds
          path: build
  release-itchio:
    name: To itchio
    needs: build  
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:latest
    steps:
      - name: Download build 
        uses: actions/download-artifact@v4
        with:
          name: my-builds
      - name: Listar archivos en la carpeta
        run: |
          ls
      - name: Upload bundles
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
          ITCH_GAME: ${{ secrets.ITCHIO_GAME }}
          ITCH_USER: ${{ secrets.ITCHIO_USERNAME }}
        run: |
          echo $GITHUB_REF_NAME
          butler push web $ITCH_USER/$ITCH_GAME:html5 --userversion $GITHUB_REF_NAME
          butler push windows $ITCH_USER/$ITCH_GAME:windows --userversion $GITHUB_REF_NAME
          butler push linux $ITCH_USER/$ITCH_GAME:linux --userversion $GITHUB_REF_NAME
          butler push mac $ITCH_USER/$ITCH_GAME:mac --userversion $GITHUB_REF_NAME
