name: Android build and upload

on:
  workflow_dispatch:
  #release:
  #  types: [published]
  #push:
  #  tags:
  #    - 'godot-dice-roller-[0-9]+.[0-9]+.[0-9]+'
  #  paths:
  #    - "version"
  #    - ".github/workflows/publish-android.yml"
  #    - "export_presets.android.example"

env:
  GODOT_ANDROID_KEYSTORE_RELEASE_USER:  ${{ secrets.ANDROID_KEYSTORE_RELEASE_ALIAS }}
  GODOT_ANDROID_KEYSTORE_RELEASE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_RELEASE_PASSWORD }}
  GODOT_ANDROID_KEYSTORE_DEBUG_USER:  ${{ secrets.ANDROID_KEYSTORE_DEBUG_ALIAS }}
  GODOT_ANDROID_KEYSTORE_DEBUG_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_DEBUG_PASSWORD }}

  #ANDROID_SERVICE_ACCOUNT_JSON: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}
  #ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}

  WORKING_DIRECTORY: .
  APPNAME: Godot Dice Roller
  APPDOMAIN: net.canvoki.godot_dice_roller

jobs:

  deploy-android:
    #if: github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: barichello/godot-ci:latest
    steps:

      - name: ‚¨áÔ∏è Checkout source code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: ‚¨áÔ∏è Godot Asset Lib Client install
        shell: bash
        run: |
          apt update
          apt install -y imagemagick python3-pip python-is-python3 apksigner
          echo ~/.local/bin >> $GITHUB_PATH
          mkdir -p ~/.cache/pip
          pip install --user "godot-asset-library-client>=0.5"

      - name: ü™™ Read version number and version code
        shell: bash
        run: |
          python tools/android-metadata.py # generates android metadata from README.md, CHANGES.md and screenshots
          #GODOT_VERSION=$(godot-asset-library-client project-field godot_version)
          GODOT_VERSION=4.4.1
          APPNAME=$(cat fastlane/metadata/en-US/title.txt | sed 's/ //g')
          VERSION_NAME=$(godot-asset-library-client project-field project_version)
          IFS='.' read -r -a v <<<"$VERSION_NAME"
          VERSION_CODE=$(printf "%03d" ${v[*]})
          EXPORT_NAME=$(cat fastlane/metadata/en-US/title.txt | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')
          ASSET_PREFIX="$EXPORT_NAME-$VERSION_NAME"

          echo "GODOT_VERSION=$GODOT_VERSION" >> $GITHUB_ENV
          echo "APPNAME=$APPNAME" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "EXPORT_NAME=$EXPORT_NAME" >> $GITHUB_ENV
          echo "ASSET_PREFIX=$ASSET_PREFIX" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: üîëü§ñCreate Android keystores
        run: |
          if [ -n "${{secrets.ANDROID_KEYSTORE_RELEASE_BASE64}}" ]; then
            echo ${{secrets.ANDROID_KEYSTORE_RELEASE_BASE64}} | base64 --decode > release.keystore
            echo "GODOT_ANDROID_KEYSTORE_RELEASE_PATH=release.keystore" >> $GITHUB_ENV
          fi
          if [ -n "${{secrets.ANDROID_KEYSTORE_DEBUG_BASE64}}" ]; then
            echo ${{secrets.ANDROID_KEYSTORE_DEBUG_BASE64}} | base64 --decode > debug.keystore
            echo "GODOT_ANDROID_KEYSTORE_DEBUG_PATH=debug.keystore" >> $GITHUB_ENV
          fi

      - name: üîó Setup symlink for GUT
        run: |
          mkdir -p addons
          ln -sf ../externals/gut/addons/gut addons/gut
  
      - name: Setup Environment
        run: |
          # Barichello image and act cli setup config and templates
          # at /root as home, but Github action runner uses /home/github.
          echo Home set to $HOME
          if [ "$HOME" != "/root" ]; then
              echo Copying image config and templates to actual home from /root
              mkdir -p ~/.local/share
              cp -rv /root/.local/share/godot ~/.local/share/godot
              mkdir -p ~/.config
              cp -rv /root/.config/godot ~/.config
          else
              echo No need to copy image home, already at $HOME
          fi
          mkdir -p .godot/editor .godot/imported

      - name: üèóÔ∏è Godot Android export (barichello)
        run: |
            mkdir -p build/android
            timeout 60s godot -v --import --headless --quit < /dev/null || true
            godot -v --export-release "Android" --headless --quit ./build/android/$ASSET_PREFIX-android.apk < /dev/null
            find build

      - name: üîëü§ñ Sign android package
        run: |
            apksigner sign \
                --ks ${GODOT_ANDROID_KEYSTORE_DEBUG_PATH} \
                --ks-key-pass env:GODOT_ANDROID_KEYSTORE_DEBUG_PASSWORD \
                --ks-key-alias ${{env.GODOT_ANDROID_KEYSTORE_DEBUG_USER}} \
                ./build/android/$ASSET_PREFIX-android.apk


      # GITHUB RELEASES
      - name: Bundle aab to apk (signed)
        if: false
        run: |
          wget -q https://github.com/google/bundletool/releases/download/1.14.0/bundletool-all-1.14.0.jar
          java -jar bundletool-all-1.14.0.jar build-apks \
            --bundle=${{ env.APPNAME }}.aab \
            --output=${{ env.APPNAME }}.apks \
            --ks=release.keystore \
            --ks-pass=pass:"$ANDROID_STORE_PASSWORD" \
            --ks-key-alias="$GODOT_ANDROID_KEYSTORE_RELEASE_USER" \
            --key-pass=pass:"$GODOT_ANDROID_KEYSTORE_RELEASE_PASSWORD" \
            --mode=universal
          unzip -p ${{ env.APPNAME }}.apks universal.apk > ${{ env.APPNAME }}.apk

      # GITHUB RELEASES
      - name: Bundle aab to apk (unsigned)
        if: false
        run: |
          wget -q https://github.com/google/bundletool/releases/download/1.14.0/bundletool-all-1.14.0.jar
          java -jar bundletool-all-1.14.0.jar build-apks \
            --bundle=${{ env.APPNAME }}.aab \
            --output=${{ env.APPNAME }}.apks \
            --mode=universal
          unzip -p ${{ env.APPNAME }}.apks universal.apk > ${{ env.APPNAME }}.apk

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.ASSET_PREFIX}}-android-build
          path: build/android

      - name: Create service-account.json
        if: false
        run: echo $ANDROID_SERVICE_ACCOUNT_JSON > service-account.json

      - name: Publish to Play Store
        if: false
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: service-account.json
          packageName: ${{ env.APPDOMAIN}}
          releaseFiles: ${{ env.APPNAME }}.aab
          track: "internal"
          status: completed

      - name: Upload Release
        if: false
        uses: ncipollo/release-action@v1
        with:
          skipIfReleaseExists: true
          allowUpdates: false
          draft: true
          generateReleaseNotes: true
          artifacts: ""
          bodyFile: fastlane/metadata/en-US/changelogs/${{env.VERSION_CODE}}.txt
  

